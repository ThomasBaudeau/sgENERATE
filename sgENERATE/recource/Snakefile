import os
path=config.get('path')+'/'

NB=config.get('NB')
REAL=config.get('REAL')
ER=config.get('ER')
COMP=config.get('COMP')
MODE=config.get('mode')


if MODE=='extraction':
    rule all:
        input:
            'result/non_COV_cano.fasta'

else:
    if COMP=='True': 
        rule all:
            input:
                'result/final_COV_SG_ER.pdf'
    else:
        rule all:
            input:
                'result/final_COV_agregate.fastq'

def get_checkpoint_sg(wildcards):
    ck_output = checkpoints.generate_sgref.get(**wildcards).output[0]
    return expand('result/sg_ref_{species}/{sample}.fasta',species=wildcards.species, sample=glob_wildcards(os.path.join(ck_output, "{sample}.fasta")).sample)

def get_checkpoint_simu(wildcards):
    ck_output = checkpoints.simu_phase.get(**wildcards).output[0]
    return expand('result/pbsim2/{species}/simu_{nbsample}.fastq',species=wildcards.species, nbsample=glob_wildcards(os.path.join(ck_output, "simu_{nbsample}.fastq")).nbsample)


checkpoint generate_sgref:
    input:
        path+"data/ref/{species}_ref.fna",
        path+"data/SGtable/{species}_table"
    output:
        directory('result/sg_ref_{species}')  
    script:
        path+'script/generate_sgRNA.py'



rule generate_amplicon:
    input:
        ref=path+"data/ref/{species}_ref.fna",
        ampli=path+"data/amplicon/artic_amplicons_V3.bed",
        c=get_checkpoint_sg
    output:
        'result/{species}_multifastq.faa'
    script:
        path+'script/generate_amplicon.py'

if not REAL:

    
    checkpoint simu_phase:
        input:
            ref='result/{species}_multifastq.faa',
            model=path+"data/model/R103.model"
        conda:
            "env/pbsim.yaml"
        output:
            directory("result/pbsim2/{species}/")#temp("simu_{species}")
        params:
            number=NB,
            tsize=2000,
            er=ER,
            tmin= 2000,
            tmax= 2000
        shell:
            "mkdir -p {output};pbsim --depth {params.number} --prefix {output}/simu --length-mean {params.tsize} --length-min {params.tmin} --length-max {params.tmax} --accuracy-mean {params.er} --difference-ratio 23:31:46 --seed 1234 --hmm_model {input.model} {input.ref};rm -f {output}/*.maf;rm -f {output}/*.ref;"
    rule make_graph: 
        input:
            a='Periscope/{species}_periscope_counts.csv',
            peri='Periscope/{species}_periscope.bam',
            d='Periscope/{species}_periscope_novel_counts.csv',
            a2='Periscope_mult/{species}_periscope_counts.csv',
            peri2='Periscope_mult/{species}_periscope.bam',
            d2='Periscope_mult/{species}_periscope_novel_counts.csv',
            b='result/{species}_multifastq.faa',
            c='result/final_{species}_proportion.txt',
            nbread='result/{species}_nbread.txt',
        output:
            'result/final_{species}_SG_ER.pdf'
        script:
            path+'script/run_make_stats.py'

    rule agregate_read:
        input:
            l=get_checkpoint_simu,
            p='result/{species}_multifastq.faa',
        output:
            a='result/final_{species}_agregate.fastq',
            b='result/final_{species}_proportion.txt'
        params:
            nb=NB
        script:
            path+'script/agregate_amplicon.py'

    rule run_periscope_multi:
        input:
            'result/final_{species}_agregate.fastq'
        output:
            'Periscope_mult/{species}_periscope_counts.csv',
            'Periscope_mult/{species}_periscope_novel_counts.csv',
            'Periscope_mult/{species}_periscope.bam'
        conda:
            'env/perimult.yaml'
        params:
            tool=config.get('tool'),
            tech=config.get('tech'),
        benchmark:
            "benchmarks/PeriscopeMult_{species}.txt"
        shell:
            "periscope_multi --fastq {input} --tool {params.tool} --technology {params.tech} --gff "+path+"script/covid.gff --technology ont --artic-primers V3 --output-prefix Periscope_mult/{wildcards.species} --threads 18;rm -f Periscope_mult/COV.*"
    rule periscope:
        input:
            'result/final_{species}_agregate.fastq'
        output:
            'Periscope/{species}_periscope_counts.csv',
            'Periscope/{species}_periscope_novel_counts.csv',
            'Periscope/{species}_periscope.bam'
        params:
            tech=config.get('tech')
        conda:
            'env/peri.yaml'
        benchmark:
            "benchmarks/Periscope_{species}.txt"
        shell:
            """
            periscope --fastq {input} --technology {params.tech} --artic-primers V3 --output-prefix {wildcards.species} --threads 18;
            mv {wildcards.species}_periscope_counts.csv Periscope/{wildcards.species}_periscope_counts.csv;
            mv {wildcards.species}_periscope_novel_counts.csv Periscope/{wildcards.species}_periscope_novel_counts.csv
            mv {wildcards.species}_periscope.bam Periscope/{wildcards.species}_periscope.bam
            rm -f COV*
            """ 
            #
        
    rule getnbread:
        input:
            'result/final_{species}_agregate.fastq'
        output:
            'result/{species}_nbread.txt'
        shell:
            'cat {input} | wc -l > {output}'

if REAL:
    
    rule run_periscope_multi:
        input:
            fastq=config.get('fastq')
        output:
            'Periscope_mult/{species}_periscope_counts.csv',
            'Periscope_mult/{species}_periscope_novel_counts.csv',
            'Periscope_mult/{species}_periscope.bam'
        conda:
            'env/perimult.yaml'
        params:
            tool=config.get('tool'),
            tech=config.get('tech'),
        benchmark:
            "benchmarks/PeriscopeMult_{species}.txt"
        shell:
            "periscope_multi --fastq {input.fastq} --tool {params.tool}  --gff "+path+"script/covid.gff --technology ont --artic-primers V3 --output-prefix Periscope_mult/{wildcards.species} --threads 18;rm -f Periscope_mult/COV.*"

    

    

            
    if config.get('tech')=='illumina':
        print('mode illumina')
        rule periscope_1:
            input:
                fastq=config.get('fastq')
            output:
                '{species}_resulttt.bam',
                'Periscope/{species}_periscope_counts.csv',
                'Periscope/{species}_periscope_novel_counts.csv',
                
            params:
                tech=config.get('tech')
            conda:
                'env/peri.yaml'
            benchmark:
                "benchmarks/Periscope_{species}.txt"
            shell:
                """
                periscope --fastq {input.fastq} --technology {params.tech} --artic-primers V3 --output-prefix {wildcards.species} --threads 18;
                mv {wildcards.species}_periscope_counts.csv Periscope/{wildcards.species}_periscope_counts.csv;
                mv {wildcards.species}_periscope_novel_counts.csv Periscope/{wildcards.species}_periscope_novel_counts.csv
                mv {wildcards.species}.bam {wildcards.species}_resulttt.bam
                """ 

        rule periscope_bam:
            input:
                '{species}_resulttt.bam'
            output:
                'Periscope/{species}_periscope.bam'
            params:
                search = path+'script/parse_bam_peri.py',
                bed=path+'data/SGtable/orf_start.bed'
            conda:
                'env/peri.yaml'
            shell:
                """
                python {params.search} --bam {input} --orf-bed {params.bed} --output-prefix {wildcards.species} --threads 18;
                mv {wildcards.species}_periscope.bam Periscope/{wildcards.species}_periscope.bam;rm -f COV*
                """ 
        rule getnbread:
            input:
                fastq=config.get('fastq')
            output:
                'result/{species}_nbread.txt'
            shell:
                'cat {input.fastq} | wc -l > {output}'
        rule make_graph: 
            input:
                a='Periscope/{species}_periscope_counts.csv',
                peri='Periscope/{species}_periscope.bam',
                d='Periscope/{species}_periscope_novel_counts.csv',
                a2='Periscope_mult/{species}_periscope_counts.csv',
                peri2='Periscope_mult/{species}_periscope.bam',
                d2='Periscope_mult/{species}_periscope_novel_counts.csv',
                b='result/{species}_multifastq.faa',
                nbread='result/{species}_nbread.txt',
            output:
                'result/final_{species}_SG_ER.pdf'
            script:
                'script/make_stats_illu.py'

    if not config.get('tech')=='illumina':
        print('not illumina')
        rule periscope:
            input:
                fastq=config.get('fastq')
            output:
                'Periscope/{species}_periscope_counts.csv',
                'Periscope/{species}_periscope_novel_counts.csv',
                'Periscope/{species}_periscope.bam'
            params:
                tech=config.get('tech')
            conda:
                'env/peri.yaml'
            benchmark:
                "benchmarks/Periscope_{species}.txt"
            shell:
                """
                periscope --fastq {input.fastq} --technology {params.tech} --artic-primers V3 --output-prefix {wildcards.species} --threads 18;
                mv {wildcards.species}_periscope_counts.csv Periscope/{wildcards.species}_periscope_counts.csv;
                mv {wildcards.species}_periscope_novel_counts.csv Periscope/{wildcards.species}_periscope_novel_counts.csv
                mv {wildcards.species}_periscope.bam Periscope/{wildcards.species}_periscope.bam
                rm -f COV*
                """ 
        rule getnbread:
            input:
                'result/final_{species}_agregate.fastq'
            output:
                'result/{species}_nbread.txt'
            shell:
                'cat {input} | wc -l > {output}'
        rule make_graph: 
            input:
                a='Periscope/{species}_periscope_counts.csv',
                peri='Periscope/{species}_periscope.bam',
                d='Periscope/{species}_periscope_novel_counts.csv',
                a2='Periscope_mult/{species}_periscope_counts.csv',
                peri2='Periscope_mult/{species}_periscope.bam',
                d2='Periscope_mult/{species}_periscope_novel_counts.csv',
                b='result/{species}_multifastq.faa',
                nbread='result/{species}_nbread.txt',
            output:
                'result/final_{species}_SG_ER.pdf'
            script:
                'script/run_make_stats.py'

rule extract_sgRNA:
    input:
        a='Periscope_mult/{species}_periscope.bam',
        b='result/file_name.txt'
    output:
        'result/non_{species}_cano.fasta'
    script:
        'script/extract_ncsgRNA.py'
          

rule run_minimap2:
    input:
        ref='result/{species}_multifastq.faa',
        fastq='result/final_{species}_agregate.fastq'
    output:
        'result/minimap_{species}.bam'
    conda:
        'env/minimap2.yaml'
    shell:
        "minimap2 -ax map-ont --secondary=no -k 15 -w 1 -t 8 {input.ref} {input.fastq} | samtools sort - | samtools view -bh  > {output};samtools index {output}"
        #minimap2 -ax splice -k 8 -w 1 -g 20000 -G 20000 -CO -uf --no-end-flt --splice-flank=no {input.ref} {input.fastq} | samtools sort - | samtools view -bh  > {output};samtools index {output}"




